/*
 * SVDSCTFNWS01v3
 * # This is a SVDSCTFNWS01v3 server spec You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/). For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: pinbal@fundaciobit.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

 package es.caib.scsp.api.cedent.client.SVDSCTFNWS01v3.custom;

import es.caib.scsp.api.cedent.client.SVDSCTFNWS01v3.model.DatosAdicionalesTitular;
import es.caib.scsp.api.cedent.client.SVDSCTFNWS01v3.model.DatosPersonales;
import es.caib.scsp.api.cedent.client.SVDSCTFNWS01v3.model.Documentacion;
import es.caib.scsp.api.cedent.client.SVDSCTFNWS01v3.model.ModelApiResponse;
import es.caib.scsp.api.cedent.client.SVDSCTFNWS01v3.model.Resultado;
import es.caib.scsp.api.cedent.client.SVDSCTFNWS01v3.model.Solicitud;
import es.caib.scsp.api.cedent.client.SVDSCTFNWS01v3.model.Titular;
import es.caib.scsp.api.cedent.client.SVDSCTFNWS01v3.model.TituloFamiliaNumerosa;
import es.caib.scsp.api.cedent.client.SVDSCTFNWS01v3.services.ApiException;

import java.nio.charset.StandardCharsets;
import org.junit.Test;
import org.junit.Ignore;

import org.springframework.util.Base64Utils;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ws.rs.ProcessingException;
import javax.ws.rs.core.HttpHeaders;
import static org.junit.Assert.assertNotNull;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * API tests for Svdsctfnws01v3Api
 */

public class Svdsctfnws01v3ApiCustomTest {

    private final Svdsctfnws01v3ApiCustom api = new Svdsctfnws01v3ApiCustom();

    /**
     * Realitza una consulta al cedent
     *
     * Realitza una consulta al cedent
     *
     * @throws Exception
     *          if the Api call fails
     */
    
    
    @Test
    public void peticionSincronaCustomTest() throws Exception {
        
        Logger.getLogger(Svdsctfnws01v3ApiCustomTest.class.getName()).log(Level.INFO, "Entrando");
        
        ApiClientCustom apiClient =  api.getApiClientCustom();

        apiClient.setBasePath("http://localhost:8080/pinbal-services/rest");

        apiClient.setDebugging(true);

        String usuari = "pinbal";
        String secret = "!puW6PHUQC%c";

        String userpass = usuari.concat(":").concat(secret);

        apiClient.addDefaultHeader(HttpHeaders.AUTHORIZATION, "Basic " + Base64Utils.encodeToString(userpass.getBytes(StandardCharsets.UTF_8)));

        Solicitud body = new Solicitud();
        
        String codigoComunidadAutonoma = "4";
        String numeroTitulo = null;
        String fechaConsulta = null;

        TituloFamiliaNumerosa tituloFamiliaNumerosa = new TituloFamiliaNumerosa();
        tituloFamiliaNumerosa.setCodigoComunidadAutonoma(codigoComunidadAutonoma);
        tituloFamiliaNumerosa.setNumeroTitulo(numeroTitulo);
        tituloFamiliaNumerosa.setFechaConsulta(fechaConsulta);

        body.setTituloFamiliaNumerosa(tituloFamiliaNumerosa);

        DatosAdicionalesTitular datosAdicionalesTitular = new DatosAdicionalesTitular();
        
        Documentacion documentacion = new Documentacion();
        
        Documentacion.TipoEnum tipo = Documentacion.TipoEnum.NIF;
        //String valor = "41438576M";
        String valor = "43085322C";
        documentacion.setTipo(tipo);
        documentacion.setValor(valor);
        
        System.out.println(documentacion);

        DatosPersonales datosPersonales = new DatosPersonales();


        datosAdicionalesTitular.setDocumentacion(documentacion);
        datosAdicionalesTitular.setDatosPersonales(datosPersonales);

        body.setTitular(datosAdicionalesTitular);

        assertNotNull(body);
        assertNotNull(datosAdicionalesTitular);
        
        Map<String, Object> response;

        Resultado resultado;
        ModelApiResponse modelApiResponse;
       
        try {
            response = api.peticionSincronaCustom(body);

            resultado = (Resultado) response.get("returnType");
            modelApiResponse = (ModelApiResponse) response.get("errorType");
            
        } catch (ProcessingException ex) {

            Logger.getLogger(Svdsctfnws01v3ApiCustomTest.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("No identificat");
            
        } catch (ApiException ex) {
            System.out.println("Codigo: " +  api.getApiClientCustom().getStatusCode() + " " + ex.getMessage() + " " +  api.getApiClientCustom().getResponseHeaders());

            String jsonString = ex.getMessage();

            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode jsonNode = objectMapper.readTree(jsonString);

            System.out.println(jsonNode.get("code").asInt());
            System.out.println(jsonNode.get("message").asText());


            //GenericType<ModelApiResponse> localVarReturnType = new GenericType<ModelApiResponse>() {};

        }

        
    }
}
